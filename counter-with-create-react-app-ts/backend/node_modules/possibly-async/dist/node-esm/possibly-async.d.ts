import { PromiseLikeValue, EnsurePromiseLike } from 'core-helpers';
export declare function possiblyAsync<ValueOrPromise, OnFulfilledResult, Value = PromiseLikeValue<ValueOrPromise>, Result = ValueOrPromise extends PromiseLike<Value> ? EnsurePromiseLike<OnFulfilledResult> : OnFulfilledResult>(valueOrPromise: ValueOrPromise, onFulfilled: (value: Value) => OnFulfilledResult): Result;
export declare function possiblyAsync<ValueOrPromise, OnFulfilledResult, OnRejectedResult, Value = PromiseLikeValue<ValueOrPromise>, Result = ValueOrPromise extends PromiseLike<Value> ? EnsurePromiseLike<OnFulfilledResult> | EnsurePromiseLike<OnRejectedResult> : OnFulfilledResult>(valueOrPromise: ValueOrPromise, onFulfilled: (value: Value) => OnFulfilledResult, onRejected: ((reason: any) => OnRejectedResult) | undefined): Result;
export declare namespace possiblyAsync {
    function invoke<ValueOrPromise, OnFulfilledResult, Value = PromiseLikeValue<ValueOrPromise>, Result = ValueOrPromise extends PromiseLike<Value> ? EnsurePromiseLike<OnFulfilledResult> : OnFulfilledResult>(func: () => ValueOrPromise, onFulfilled: (value: Value) => OnFulfilledResult): Result;
    function invoke<ValueOrPromise, OnFulfilledResult, OnRejectedResult, Value = PromiseLikeValue<ValueOrPromise>, Result = ValueOrPromise extends PromiseLike<Value> ? EnsurePromiseLike<OnFulfilledResult> | EnsurePromiseLike<OnRejectedResult> : OnFulfilledResult | OnRejectedResult>(func: () => ValueOrPromise, onFulfilled: (value: Value) => OnFulfilledResult, onRejected: ((reason: any) => OnRejectedResult) | undefined): Result;
    function forEach<Value, IterateeResultValueOrPromise, IterateeResultValue = PromiseLikeValue<IterateeResultValueOrPromise>, Result = IterateeResultValueOrPromise extends PromiseLike<IterateeResultValue> ? PromiseLike<void> : void>(iterable: Iterable<Value>, iteratee: (value: Value, index: number) => IterateeResultValueOrPromise): Result;
    function map<Value, MapperResultValueOrPromise, MapperResultValue = PromiseLikeValue<MapperResultValueOrPromise>, UnwrappedMapperResultValue = MapperResultValue extends {
        [breakSymbol]: infer UnwrappedValue;
    } ? UnwrappedValue : MapperResultValue, Result = MapperResultValueOrPromise extends PromiseLike<MapperResultValue> ? PromiseLike<UnwrappedMapperResultValue[]> : UnwrappedMapperResultValue[]>(iterable: Iterable<Value>, mapper: (value: Value, index: number) => MapperResultValueOrPromise): Result;
    function mapValues<Value, MapperResultValueOrPromise, MapperResultValue = PromiseLikeValue<MapperResultValueOrPromise>, UnwrappedMapperResultValue = MapperResultValue extends {
        [breakSymbol]: infer UnwrappedValue;
    } ? UnwrappedValue : MapperResultValue, Result = MapperResultValueOrPromise extends PromiseLike<MapperResultValue> ? PromiseLike<{
        [key: string]: UnwrappedMapperResultValue;
    }> : {
        [key: string]: UnwrappedMapperResultValue;
    }>(object: {
        [key: string]: Value;
    }, mapper: (value: Value, key: string) => MapperResultValueOrPromise): Result;
    function some<Value, IterateeResultValueOrPromise, IterateeResultValue = PromiseLikeValue<IterateeResultValueOrPromise>, Result = IterateeResultValueOrPromise extends PromiseLike<IterateeResultValue> ? PromiseLike<boolean> : boolean>(iterable: Iterable<Value>, iteratee: (value: Value, index: number) => IterateeResultValueOrPromise): Result;
    const breakSymbol: unique symbol;
}
