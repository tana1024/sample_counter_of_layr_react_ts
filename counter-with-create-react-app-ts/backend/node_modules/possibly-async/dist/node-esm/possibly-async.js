import isPromise from 'is-promise';
export function possiblyAsync(valueOrPromise, onFulfilled, onRejected) {
    return isPromise(valueOrPromise)
        ? valueOrPromise.then(onFulfilled, onRejected)
        : onFulfilled(valueOrPromise);
}
(function (possiblyAsync) {
    function invoke(func, onFulfilled, onRejected) {
        try {
            return possiblyAsync(func(), onFulfilled, onRejected);
        }
        catch (error) {
            if (onRejected !== undefined) {
                return onRejected(error);
            }
            throw error;
        }
    }
    possiblyAsync.invoke = invoke;
    function forEach(iterable, iteratee) {
        const iterator = iterable[Symbol.iterator]();
        let index = 0;
        const iterate = () => {
            const { value, done } = iterator.next();
            if (!done) {
                return possiblyAsync(iteratee(value, index++), (result) => {
                    if (result !== possiblyAsync.breakSymbol) {
                        return iterate();
                    }
                });
            }
        };
        return iterate();
    }
    possiblyAsync.forEach = forEach;
    function map(iterable, mapper) {
        let result = [];
        return possiblyAsync(possiblyAsync.forEach(iterable, (value, index) => possiblyAsync(mapper(value, index), (mappedValue) => {
            if (isBreaking(mappedValue)) {
                result.push(mappedValue[possiblyAsync.breakSymbol]);
                return possiblyAsync.breakSymbol;
            }
            result.push(mappedValue);
        })), () => result);
    }
    possiblyAsync.map = map;
    function mapValues(object, mapper) {
        let result = {};
        return possiblyAsync(possiblyAsync.forEach(Object.entries(object), ([key, value]) => possiblyAsync(mapper(value, key), (mappedValue) => {
            if (isBreaking(mappedValue)) {
                result[key] = mappedValue[possiblyAsync.breakSymbol];
                return possiblyAsync.breakSymbol;
            }
            result[key] = mappedValue;
        })), () => result);
    }
    possiblyAsync.mapValues = mapValues;
    function some(iterable, iteratee) {
        let result = false;
        return possiblyAsync(possiblyAsync.forEach(iterable, (value, index) => possiblyAsync(iteratee(value, index), (iterateeResult) => {
            if (iterateeResult) {
                result = true;
                return possiblyAsync.breakSymbol;
            }
        })), () => result);
    }
    possiblyAsync.some = some;
    possiblyAsync.breakSymbol = Symbol('BREAK');
    function isBreaking(value) {
        return (typeof value === 'object' &&
            value !== null &&
            Object.prototype.hasOwnProperty.call(value, possiblyAsync.breakSymbol));
    }
})(possiblyAsync || (possiblyAsync = {}));
//# sourceMappingURL=possibly-async.js.map