import { PlainObject } from 'core-helpers';
import { serializeUndefined, serializeDate, serializeRegExp, serializeError } from './serialization';
export declare type DeserializeOptions = {
    objectDeserializer?: (object: PlainObject) => object | void;
    functionDeserializer?: (object: PlainObject) => Function | void;
    errorHandler?: (error: Error) => unknown;
};
export declare type DeserializeResult<Value> = Value extends ReturnType<typeof serializeUndefined> ? undefined : Value extends ReturnType<typeof serializeDate> ? Date : Value extends ReturnType<typeof serializeRegExp> ? RegExp : Value extends ReturnType<typeof serializeError> ? Error : Value extends Array<infer Element> ? Array<DeserializeResult<Element>> : Value extends object ? object : Value;
export declare function deserialize<Value>(value: Value, options?: DeserializeOptions): DeserializeResult<Value>;
