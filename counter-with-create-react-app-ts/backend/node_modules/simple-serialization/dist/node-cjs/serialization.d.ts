import { PlainObject } from 'core-helpers';
export declare type SerializeOptions = {
    objectSerializer?: (object: object) => object | void;
    functionSerializer?: (object: Function) => object | void;
};
export declare type SerializeResult<Value> = Value extends undefined ? ReturnType<typeof serializeUndefined> : Value extends Date ? ReturnType<typeof serializeDate> : Value extends RegExp ? ReturnType<typeof serializeRegExp> : Value extends Error ? ReturnType<typeof serializeError> : Value extends Array<infer Element> ? Array<SerializeResult<Element>> : Value extends object ? object : Value;
export declare function serialize<Value>(value: Value, options?: SerializeOptions): SerializeResult<Value>;
export declare function serializeUndefined(): {
    __undefined: true;
};
export declare function serializeDate(date: Date): {
    __date: string;
};
export declare function serializeRegExp(regExp: RegExp): {
    __regExp: string;
};
export declare function serializeError(error: Error, options?: SerializeOptions): {
    __error: string;
} & PlainObject;
