"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.merge = void 0;
const tslib_1 = require("tslib");
const simple_cloning_1 = require("simple-cloning");
const core_helpers_1 = require("core-helpers");
const isObjectLike_1 = tslib_1.__importDefault(require("lodash/isObjectLike"));
function merge(value, forkedValue, options) {
    if (isObjectLike_1.default(value) && isObjectLike_1.default(forkedValue) && core_helpers_1.isPrototypeOf(value, forkedValue)) {
        return mergeObject(value, forkedValue, options);
    }
    if (typeof value === 'function' || typeof forkedValue === 'function') {
        throw new Error('Cannot merge a function');
    }
    return simple_cloning_1.clone(forkedValue, options);
}
exports.merge = merge;
function mergeObject(object, forkedObject, options) {
    const objectMerger = options === null || options === void 0 ? void 0 : options.objectMerger;
    if (objectMerger !== undefined) {
        const mergedObject = objectMerger(object, forkedObject);
        if (mergedObject !== undefined) {
            return mergedObject;
        }
    }
    mergeAttributes(object, forkedObject, options);
    return object;
}
function mergeAttributes(object, forkedObject, options) {
    for (const [name, forkedValue] of Object.entries(forkedObject)) {
        const value = object[name];
        object[name] = merge(value, forkedValue, options);
    }
}
//# sourceMappingURL=merging.js.map