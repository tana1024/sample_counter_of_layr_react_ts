import { Component, IntrospectedComponent, ComponentGetter, PropertyFilter } from '@layr/component';
import { PlainObject } from 'core-helpers';
export interface ComponentServerLike {
    receive: ComponentServer['receive'];
}
export declare type ComponentServerOptions = {
    name?: string;
    version?: number;
};
/**
 * A base class allowing to serve a root [`Component`](https://layrjs.com/docs/v1/reference/component) so it can be accessed by a [`ComponentClient`](https://layrjs.com/docs/v1/reference/component-client).
 *
 * Typically, instead of using this class, you would use a class such as [`ComponentHTTPServer`](https://layrjs.com/docs/v1/reference/component-http-server), or a middleware such as [`component-express-middleware`](https://layrjs.com/docs/v1/reference/component-express-middleware).
 */
export declare class ComponentServer {
    _component: typeof Component;
    _introspectedComponent: IntrospectedComponent;
    _name: string | undefined;
    _version: number | undefined;
    /**
     * Creates a component server.
     *
     * @param component The root [`Component`](https://layrjs.com/docs/v1/reference/component) class to serve.
     * @param [options.version] A number specifying the version of the returned component server (default: `undefined`).
     *
     * @returns A `ComponentServer` instance.
     *
     * @examplelink See [`ComponentClient`'s example](https://layrjs.com/docs/v1/reference/component-client#constructor).
     *
     * @category Creation
     */
    constructor(component: typeof Component, options?: ComponentServerOptions);
    receive(request: {
        query: PlainObject;
        components?: PlainObject[];
        version?: number;
    }): {
        components?: PlainObject[];
        result?: unknown;
    } | PromiseLike<{
        components?: PlainObject[];
        result?: unknown;
    }>;
    _deserializeRequest({ serializedQuery, serializedComponents }: {
        serializedQuery: PlainObject;
        serializedComponents: PlainObject[] | undefined;
    }, { componentGetter, attributeFilter }: {
        componentGetter: ComponentGetter;
        attributeFilter: PropertyFilter;
    }): {
        deserializedQuery: PlainObject;
        deserializedComponents: (typeof Component | Component)[];
    };
    _serializeResponse({ result, components }: {
        result: unknown;
        components: (typeof Component | Component)[] | undefined;
    }, { attributeFilter }: {
        attributeFilter: PropertyFilter;
    }): {
        serializedResult: unknown;
        serializedComponents: PlainObject[] | undefined;
    } | PromiseLike<{
        serializedResult: unknown;
        serializedComponents: PlainObject[] | undefined;
    }>;
    validateVersion(clientVersion: number | undefined): void;
    _deeprRoot: PlainObject;
    getDeeprRoot(): PlainObject;
    static isComponentServer(value: any): value is ComponentServer;
}
export declare function ensureComponentServer(componentOrComponentServer: typeof Component | ComponentServer, options?: ComponentServerOptions): ComponentServer;
