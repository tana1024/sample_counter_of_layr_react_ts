import type { Component, ComponentMixin } from './component';
/**
 * Returns whether the specified value is a component class.
 *
 * @param value A value of any type.
 *
 * @returns A boolean.
 *
 * @category Utilities
 */
export declare function isComponentClass(value: any): value is typeof Component;
/**
 * Returns whether the specified value is a component instance.
 *
 * @param value A value of any type.
 *
 * @returns A boolean.
 *
 * @category Utilities
 */
export declare function isComponentInstance(value: any): value is Component;
/**
 * Returns whether the specified value is a component class or instance.
 *
 * @param value A value of any type.
 *
 * @returns A boolean.
 *
 * @category Utilities
 */
export declare function isComponentClassOrInstance(value: any): value is typeof Component | Component;
/**
 * Throws an error if the specified value is not a component class.
 *
 * @param value A value of any type.
 *
 * @category Utilities
 */
export declare function assertIsComponentClass(value: any): asserts value is typeof Component;
/**
 * Throws an error if the specified value is not a component instance.
 *
 * @param value A value of any type.
 *
 * @category Utilities
 */
export declare function assertIsComponentInstance(value: any): asserts value is Component;
/**
 * Throws an error if the specified value is not a component class or instance.
 *
 * @param value A value of any type.
 *
 * @category Utilities
 */
export declare function assertIsComponentClassOrInstance(value: any): asserts value is typeof Component | Component;
/**
 * Ensures that the specified component is a class. If you specify a component instance (or prototype), the class of the component is returned. If you specify a component class, it is returned as is.
 *
 * @param component A component class or instance.
 *
 * @returns A component class.
 *
 * @example
 * ```
 * ensureComponentClass(movie) => Movie
 * ensureComponentClass(Movie.prototype) => Movie
 * ensureComponentClass(Movie) => Movie
 * ```
 *
 * @category Utilities
 */
export declare function ensureComponentClass(component: any): typeof Component;
/**
 * Ensures that the specified component is an instance (or prototype). If you specify a component class, the component prototype is returned. If you specify a component instance (or prototype), it is returned as is.
 *
 * @param component A component class or instance.
 *
 * @returns A component instance (or prototype).
 *
 * @example
 * ```
 * ensureComponentInstance(Movie) => Movie.prototype
 * ensureComponentInstance(Movie.prototype) => Movie.prototype
 * ensureComponentInstance(movie) => movie
 * ```
 *
 * @category Utilities
 */
export declare function ensureComponentInstance(component: any): Component;
/**
 * Returns whether the specified string is a valid component name. The rule is the same as for typical JavaScript class names.
 *
 * @param name The string to check.
 *
 * @returns A boolean.
 *
 * @example
 * ```
 * isComponentName('Movie') => true
 * isComponentName('Movie123') => true
 * isComponentName('Awesome_Movie') => true
 * isComponentName('123Movie') => false
 * isComponentName('Awesome-Movie') => false
 * isComponentName('movie') => false
 * ```
 *
 * @category Utilities
 */
export declare function isComponentName(name: string): boolean;
/**
 * Throws an error if the specified string is not a valid component name.
 *
 * @param name The string to check.
 *
 * @category Utilities
 */
export declare function assertIsComponentName(name: string): void;
/**
 * Transforms a component class type into a component name.
 *
 * @param name A string representing a component class type.
 *
 * @returns A component name.
 *
 * @example
 * ```
 * getComponentNameFromComponentClassType('typeof Movie') => 'Movie'
 * ```
 *
 * @category Utilities
 */
export declare function getComponentNameFromComponentClassType(type: string): string;
/**
 * Transforms a component instance type into a component name.
 *
 * @param name A string representing a component instance type.
 *
 * @returns A component name.
 *
 * @example
 * ```
 * getComponentNameFromComponentInstanceType('Movie') => 'Movie'
 * ```
 *
 * @category Utilities
 */
export declare function getComponentNameFromComponentInstanceType(type: string): string;
/**
 * Returns whether the specified string is a valid component type.
 *
 * @param name The string to check.
 * @param [options.allowClasses] A boolean specifying whether component class types are allowed (default: `true`).
 * @param [options.allowInstances] A boolean specifying whether component instance types are allowed (default: `true`).
 *
 * @returns A boolean.
 *
 * @example
 * ```
 * isComponentType('typeof Movie') => true
 * isComponentType('Movie') => true
 * isComponentType('typeof Awesome-Movie') => false
 * isComponentType('movie') => false
 * isComponentType('typeof Movie', {allowClasses: false}) => false
 * isComponentType('Movie', {allowInstances: false}) => false
 * ```
 *
 * @category Utilities
 */
export declare function isComponentType(type: string, { allowClasses, allowInstances }?: {
    allowClasses?: boolean | undefined;
    allowInstances?: boolean | undefined;
}): false | "componentClassType" | "componentInstanceType";
/**
 * Throws an error if the specified string is not a valid component type.
 *
 * @param name The string to check.
 * @param [options.allowClasses] A boolean specifying whether component class types are allowed (default: `true`).
 * @param [options.allowInstances] A boolean specifying whether component instance types are allowed (default: `true`).
 *
 * @category Utilities
 */
export declare function assertIsComponentType(type: string, { allowClasses, allowInstances }?: {
    allowClasses?: boolean | undefined;
    allowInstances?: boolean | undefined;
}): "componentClassType" | "componentInstanceType";
/**
 * Transforms a component name into a component class type.
 *
 * @param name A component name.
 *
 * @returns A component class type.
 *
 * @example
 * ```
 * getComponentClassTypeFromComponentName('Movie') => 'typeof Movie'
 * ```
 *
 * @category Utilities
 */
export declare function getComponentClassTypeFromComponentName(name: string): string;
/**
 * Transforms a component name into a component instance type.
 *
 * @param name A component name.
 *
 * @returns A component instance type.
 *
 * @example
 * ```
 * getComponentInstanceTypeFromComponentName('Movie') => 'Movie'
 * ```
 *
 * @category Utilities
 */
export declare function getComponentInstanceTypeFromComponentName(name: string): string;
declare type ComponentMap = {
    [name: string]: typeof Component;
};
export declare function createComponentMap(components?: typeof Component[]): ComponentMap;
export declare function getComponentFromComponentMap(componentMap: ComponentMap, name: string): typeof Component;
export declare function isComponentMixin(value: any): value is ComponentMixin;
export declare function assertIsComponentMixin(value: any): asserts value is ComponentMixin;
export declare function composeDescription(description: string[]): string;
export declare function joinAttributePath(path: [string?, string?]): string;
export {};
