"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fork = void 0;
const simple_forking_1 = require("simple-forking");
const utilities_1 = require("./utilities");
/**
 * Fork any type of values including objects, arrays, and components (using Component's `fork()` [class method](https://layrjs.com/docs/v1/reference/component#fork-class-method) and [instance method](https://layrjs.com/docs/v1/reference/component#fork-instance-method)).
 *
 * @param value A value of any type.
 *
 * @returns A fork of the specified value.
 *
 * @example
 * ```
 * import {fork} from 'ï¹«layr/component';
 *
 * const data = {
 *   token: 'xyz123',
 *   timestamp: 1596600889609,
 *   movie: new Movie({title: 'Inception'})
 * };
 *
 * const dataFork = fork(data);
 * Object.getPrototypeOf(dataFork); // => data
 * dataFork.token; // => 'xyz123';
 * dataFork.timestamp; // => 1596600889609
 * dataFork.movie.isForkOf(data.movie); // => true
 * ```
 *
 * @category Forking
 */
function fork(value, options = {}) {
    const { objectForker: originalObjectForker, ...otherOptions } = options;
    const objectForker = function (object) {
        if (originalObjectForker !== undefined) {
            const forkedObject = originalObjectForker(object);
            if (forkedObject !== undefined) {
                return forkedObject;
            }
        }
        if (utilities_1.isComponentClass(object)) {
            return object.fork(options);
        }
        if (utilities_1.isComponentInstance(object)) {
            return object.fork(options);
        }
    };
    return simple_forking_1.fork(value, { ...otherOptions, objectForker });
}
exports.fork = fork;
//# sourceMappingURL=forking.js.map