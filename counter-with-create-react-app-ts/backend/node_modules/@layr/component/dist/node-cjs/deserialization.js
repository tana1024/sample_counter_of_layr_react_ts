"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeFunction = exports.deserialize = void 0;
const simple_serialization_1 = require("simple-serialization");
const possibly_async_1 = require("possibly-async");
const utilities_1 = require("./utilities");
function deserialize(value, options = {}) {
    const { objectDeserializer: originalObjectDeserializer, functionDeserializer: originalFunctionDeserializer, componentGetter, attributeFilter, deserializeFunctions = false, ...otherOptions } = options;
    const objectDeserializer = function (object) {
        if (originalObjectDeserializer !== undefined) {
            const deserializedObject = originalObjectDeserializer(object);
            if (deserializedObject !== undefined) {
                return deserializedObject;
            }
        }
        const { __component: componentType, ...attributes } = object;
        if (componentType === undefined) {
            return undefined;
        }
        if (componentGetter === undefined) {
            throw new Error("Cannot deserialize a component without a 'componentGetter'");
        }
        const component = componentGetter(componentType);
        if (utilities_1.isComponentClass(component)) {
            return component.deserialize(attributes, options);
        }
        return component.constructor.recreate(attributes, options);
    };
    let functionDeserializer;
    if (deserializeFunctions) {
        functionDeserializer = function (object) {
            if (originalFunctionDeserializer !== undefined) {
                const deserializedFunction = originalFunctionDeserializer(object);
                if (deserializedFunction !== undefined) {
                    return deserializedFunction;
                }
            }
            const { __function, ...serializedAttributes } = object;
            if (__function === undefined) {
                return undefined;
            }
            const functionCode = __function;
            return possibly_async_1.possiblyAsync(possibly_async_1.possiblyAsync.mapValues(serializedAttributes, (attributeValue) => simple_serialization_1.deserialize(attributeValue, {
                ...otherOptions,
                objectDeserializer,
                functionDeserializer
            })), (deserializedAttributes) => {
                const deserializedFunction = deserializeFunction(functionCode);
                Object.assign(deserializedFunction, deserializedAttributes);
                return deserializedFunction;
            });
        };
    }
    return simple_serialization_1.deserialize(value, { ...otherOptions, objectDeserializer, functionDeserializer });
}
exports.deserialize = deserialize;
function deserializeFunction(functionCode) {
    return new Function(`return (${functionCode});`)();
    // let evalCode = `(${functionCode});`;
    // if (context !== undefined) {
    //   const contextKeys = Object.keys(context).join(', ');
    //   const contextCode = `const {${contextKeys}} = context;`;
    //   evalCode = `${contextCode} ${evalCode}`;
    // }
    // return eval(evalCode);
}
exports.deserializeFunction = deserializeFunction;
//# sourceMappingURL=deserialization.js.map