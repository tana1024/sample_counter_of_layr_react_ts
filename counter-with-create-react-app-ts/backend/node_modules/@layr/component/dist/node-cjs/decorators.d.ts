import { Component } from './component';
import { Property, AttributeOptions, MethodOptions, PropertyExposure } from './properties';
declare type AttributeDecoratorOptions = Omit<AttributeOptions, 'value' | 'default'>;
/**
 * Decorates an attribute of a component so it can be type checked at runtime, validated, serialized, observed, etc.
 *
 * @param [valueType] A string specifying the [type of values](https://layrjs.com/docs/v1/reference/value-type#supported-types) that can be stored in the attribute (default: `'any'`).
 * @param [options] The options to create the [`Attribute`](https://layrjs.com/docs/v1/reference/attribute#constructor).
 *
 * @example
 * ```
 * // JS
 *
 * import {Component, attribute, validators} from '﹫layr/component';
 *
 * const {maxLength} = validators;
 *
 * class Movie extends Component {
 *   // Optional 'string' class attribute
 *   ﹫attribute('string?') static customName;
 *
 *   // Required 'string' instance attribute
 *   ﹫attribute('string') title;
 *
 *   // Optional 'string' instance attribute with a validator
 *   ﹫attribute('string?', {validators: [maxLength(100)]}) summary;
 *
 *   // Required array of 'Actor' instance attribute with a default value
 *   ﹫attribute('Actor[]') actors = [];
 * }
 * ```
 *
 * @example
 * ```
 * // TS
 *
 * import {Component, attribute, validators} from '﹫layr/component';
 *
 * const {maxLength} = validators;
 *
 * class Movie extends Component {
 *   // Optional 'string' class attribute
 *   ﹫attribute('string?') static customName?: string;
 *
 *   // Required 'string' instance attribute
 *   ﹫attribute('string') title!: string;
 *
 *   // Optional 'string' instance attribute with a validator
 *   ﹫attribute('string?', {validators: [maxLength(100)]}) summary?: string;
 *
 *   // Required array of 'Actor' instance attribute with a default value
 *   ﹫attribute('Actor[]') actors: Actor[] = [];
 * }
 * ```
 *
 * @category Decorators
 * @decorator
 */
export declare function attribute(valueType?: string, options?: AttributeDecoratorOptions): PropertyDecorator;
export declare function attribute(options?: AttributeDecoratorOptions): PropertyDecorator;
/**
 * Decorates an attribute of a component as a [primary identifier attribute](https://layrjs.com/docs/v1/reference/primary-identifier-attribute).
 *
 * @param [valueType] A string specifying the type of values the attribute can store. It can be either `'string'` or `'number'` (default: `'string'`).
 * @param [options] The options to create the [`PrimaryIdentifierAttribute`](https://layrjs.com/docs/v1/reference/primary-identifier-attribute).
 *
 * @example
 * ```
 * // JS
 *
 * import {Component, primaryIdentifier} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // Auto-generated 'string' primary identifier attribute
 *   ﹫primaryIdentifier('string') id;
 * }

 * class Film extends Component {
 *   // Custom 'number' primary identifier attribute
 *   ﹫primaryIdentifier('number', {default() { return Math.random(); }}) id;
 * }
 * ```
 *
 * @example
 * ```
 * // TS
 *
 * import {Component, primaryIdentifier} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // Auto-generated 'string' primary identifier attribute
 *   ﹫primaryIdentifier('string') id!: string;
 * }

 * class Film extends Component {
 *   // Custom 'number' primary identifier attribute
 *   ﹫primaryIdentifier('number', {default() { return Math.random(); }}) id!: number;
 * }
 * ```
 *
 * @category Decorators
 * @decorator
 */
export declare function primaryIdentifier(valueType?: string, options?: AttributeDecoratorOptions): PropertyDecorator;
export declare function primaryIdentifier(options?: AttributeDecoratorOptions): PropertyDecorator;
/**
 * Decorates an attribute of a component as a [secondary identifier attribute](https://layrjs.com/docs/v1/reference/secondary-identifier-attribute).
 *
 * @param [valueType] A string specifying the type of values the attribute can store. It can be either `'string'` or `'number'` (default: `'string'`).
 * @param [options] The options to create the [`SecondaryIdentifierAttribute`](https://layrjs.com/docs/v1/reference/secondary-identifier-attribute).
 *
 * @example
 * ```
 * // JS
 *
 * import {Component, secondaryIdentifier} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // 'string' secondary identifier attribute
 *   ﹫secondaryIdentifier('string') slug;
 *
 *   // 'number' secondary identifier attribute
 *   ﹫secondaryIdentifier('number') reference;
 * }
 * ```
 *
 * @example
 * ```
 * // TS
 *
 * import {Component, secondaryIdentifier} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // 'string' secondary identifier attribute
 *   ﹫secondaryIdentifier('string') slug!: string;
 *
 *   // 'number' secondary identifier attribute
 *   ﹫secondaryIdentifier('number') reference!: number;
 * }
 * ```
 *
 * @category Decorators
 * @decorator
 */
export declare function secondaryIdentifier(valueType?: string, options?: AttributeDecoratorOptions): PropertyDecorator;
export declare function secondaryIdentifier(options?: AttributeDecoratorOptions): PropertyDecorator;
export declare function createAttributeDecorator(AttributeClassMap: PropertyClassMap, decoratorName: string, valueType?: string | AttributeDecoratorOptions, options?: AttributeDecoratorOptions): (target: typeof Component | Component, name: string, descriptor?: PropertyDescriptor | undefined) => void;
/**
 * Decorates a method of a component so it can be exposed and called remotely.
 *
 * @param [options] The options to create the [`Method`](https://layrjs.com/docs/v1/reference/method#constructor).
 *
 * @example
 * ```
 * import {Component, method} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // Class method
 *   ﹫method() static getConfig() {
 *     // ...
 *   }
 *
 *   // Instance method
 *   ﹫method() play() {
 *     // ...
 *   }
 * }
 * ```
 *
 * @category Decorators
 * @decorator
 */
export declare function method(options?: MethodOptions): (target: typeof Component | Component, name: string, descriptor: PropertyDescriptor) => void;
export declare function createMethodDecorator(MethodClassMap: PropertyClassMap, decoratorName: string, options?: MethodOptions): (target: typeof Component | Component, name: string, descriptor: PropertyDescriptor) => void;
declare type PropertyClassMap = Map<(value: any) => boolean, typeof Property>;
declare type ClassExposure = {
    [name: string]: PropertyExposure | {
        [name: string]: PropertyExposure;
    };
};
/**
 * Exposes some attributes or methods of a component so they can be consumed remotely.
 *
 * This decorator is usually placed before a component attribute or method, but it can also be placed before a component class. When placed before a component class, you can expose several attributes or methods at once, and even better, you can expose attributes or methods that are defined in a parent class.
 *
 * @param exposure An object specifying which operations should be exposed. When the decorator is placed before a component attribute or method, the object is of type [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type). When the decorator is placed before a component class, the shape of the object is `{[propertyName]: PropertyExposure, prototype: {[propertyName]: PropertyExposure}}`.
 *
 * @example
 * ```
 * // JS
 *
 * import {Component, expose, attribute, method} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // Class attribute exposing the 'get' operation only
 *   ﹫expose({get: true}) ﹫attribute('string?') static customName;
 *
 *   // Instance attribute exposing the 'get' and 'set' operations
 *   ﹫expose({get: true, set: true}) ﹫attribute('string') title;
 *
 *   // Class method exposure
 *   ﹫expose({call: true}) ﹫method() static getConfig() {
 *     // ...
 *   }
 *
 *   // Instance method exposure
 *   ﹫expose({call: true}) ﹫method() play() {
 *     // ...
 *   }
 * }
 *
 * // Exposing some class and instance methods that are defined in a parent class
 * ﹫expose({find: {call: true}, prototype: {load: {call: true}}})
 * class Actor extends Storable(Component) {
 *   // ...
 * }
 * ```
 *
 * @example
 * ```
 * // TS
 *
 * import {Component, expose, attribute, method} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   // Class attribute exposing the 'get' operation only
 *   ﹫expose({get: true}) ﹫attribute('string?') static customName?: string;
 *
 *   // Instance attribute exposing the 'get' and 'set' operations
 *   ﹫expose({get: true, set: true}) ﹫attribute('string') title!: string;
 *
 *   // Class method exposure
 *   ﹫expose({call: true}) ﹫method() static getConfig() {
 *     // ...
 *   }
 *
 *   // Instance method exposure
 *   ﹫expose({call: true}) ﹫method() play() {
 *     // ...
 *   }
 * }
 *
 * // Exposing some class and instance methods that are defined in a parent class
 * ﹫expose({find: {call: true}, prototype: {load: {call: true}}})
 * class Actor extends Storable(Component) {
 *   // ...
 * }
 * ```
 *
 * @category Decorators
 * @decorator
 */
export declare function expose(exposure: ClassExposure): (target: typeof Component | Component) => void;
export declare function expose(exposure: PropertyExposure): (target: typeof Component | Component, name: string) => void;
/**
 * Provides a component so it can be easily accessed from the current component or from any component that is "consuming" it using the [`@consume()`](https://layrjs.com/docs/v1/reference/component#consume-decorator) decorator.
 *
 * @example
 * ```
 * // JS
 *
 * import {Component, provide, consume} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   ﹫consume() static Actor;
 * }
 *
 * class Actor extends Component {}
 *
 * class Backend extends Component {
 *   ﹫provide() static Movie = Movie;
 *   ﹫provide() static Actor = Actor;
 * }
 *
 * // Since `Actor` is provided by `Backend`, it can be accessed from `Movie`
 * Movie.Actor; // => Actor
 * ```
 *
 * @example
 * ```
 * // TS
 *
 * import {Component, provide, consume} from '﹫layr/component';
 *
 * class Movie extends Component {
 *   ﹫consume() static Actor: typeof Actor;
 * }
 *
 * class Actor extends Component {}
 *
 * class Backend extends Component {
 *   ﹫provide() static Movie = Movie;
 *   ﹫provide() static Actor = Actor;
 * }
 *
 * // Since `Actor` is provided by `Backend`, it can be accessed from `Movie`
 * Movie.Actor; // => Actor
 * ```
 *
 * @category Decorators
 * @decorator
 */
export declare function provide(): (target: typeof Component, name: string, descriptor?: PropertyDescriptor | undefined) => void;
/**
 * Consumes a component provided by the provider (or recursively, any provider's provider) of the current component so it can be easily accessed using a component accessor.
 *
 * @examplelink See [`@provide()`'s example](https://layrjs.com/docs/v1/reference/component#provide-decorator).
 *
 * @category Decorators
 * @decorator
 */
export declare function consume(): (target: typeof Component, name: string, descriptor?: PropertyDescriptor | undefined) => void;
export declare function determineCompiler(descriptor: PropertyDescriptor | undefined): "babel-legacy" | "typescript";
export {};
