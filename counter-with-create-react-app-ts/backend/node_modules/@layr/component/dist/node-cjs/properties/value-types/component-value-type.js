"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isComponentValueTypeInstance = exports.ComponentValueType = void 0;
const value_type_1 = require("./value-type");
const utilities_1 = require("../../utilities");
class ComponentValueType extends value_type_1.ValueType {
    constructor(componentType, attribute, options = {}) {
        super(attribute, options);
        utilities_1.assertIsComponentType(componentType);
        this._componentType = componentType;
    }
    getComponentType() {
        return this._componentType;
    }
    getComponent(attribute) {
        return utilities_1.ensureComponentClass(attribute.getParent()).getComponentOfType(this.getComponentType());
    }
    toString() {
        return `${this.getComponentType()}${super.toString()}`;
    }
    _checkValue(value, attribute) {
        const result = super._checkValue(value, attribute);
        if (result !== undefined) {
            return result;
        }
        const component = this.getComponent(attribute);
        if (value === component) {
            return true;
        }
        if (utilities_1.isComponentClass(value) && utilities_1.isComponentClass(component)) {
            return value.isForkOf(component);
        }
        if (utilities_1.isComponentInstance(value) && utilities_1.isComponentInstance(component)) {
            return value.constructor === component.constructor || value.isForkOf(component);
        }
        return false;
    }
    _traverseAttributes(iteratee, attribute, component, options) {
        const { setAttributesOnly } = options;
        if (!setAttributesOnly) {
            component = this.getComponent(attribute);
        }
        if (utilities_1.isComponentClassOrInstance(component)) {
            component.__traverseAttributes(iteratee, options);
        }
    }
    _resolveAttributeSelector(normalizedAttributeSelector, attribute, component, options) {
        const { setAttributesOnly } = options;
        if (normalizedAttributeSelector === false) {
            return false;
        }
        if (!setAttributesOnly) {
            component = this.getComponent(attribute);
        }
        if (!utilities_1.isComponentClassOrInstance(component)) {
            return {}; // `setAttributesOnly` is true and `component` is undefined
        }
        return component.__resolveAttributeSelector(normalizedAttributeSelector, options);
    }
    runValidators(value, attributeSelector) {
        const failedValidators = super.runValidators(value, attributeSelector);
        if (utilities_1.isComponentClassOrInstance(value)) {
            const componentFailedValidators = value.runValidators(attributeSelector);
            failedValidators.push(...componentFailedValidators);
        }
        return failedValidators;
    }
    serializeValue(value, attribute, options = {}) {
        if (utilities_1.isComponentClassOrInstance(value)) {
            return value.__serialize(options);
        }
        return super.serializeValue(value, attribute, options);
    }
    static isComponentValueType(value) {
        return isComponentValueTypeInstance(value);
    }
}
exports.ComponentValueType = ComponentValueType;
function isComponentValueTypeInstance(value) {
    var _a;
    return typeof ((_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.isComponentValueType) === 'function';
}
exports.isComponentValueTypeInstance = isComponentValueTypeInstance;
//# sourceMappingURL=component-value-type.js.map