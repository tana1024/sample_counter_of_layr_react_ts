"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPropertyInstance = exports.isPropertyClass = exports.Property = void 0;
const tslib_1 = require("tslib");
const possibly_async_1 = require("possibly-async");
const core_helpers_1 = require("core-helpers");
const mapValues_1 = tslib_1.__importDefault(require("lodash/mapValues"));
const utilities_1 = require("../utilities");
/**
 * A base class from which classes such as [`Attribute`](https://layrjs.com/docs/v1/reference/attribute) or [`Method`](https://layrjs.com/docs/v1/reference/method) are constructed. Unless you build a custom property class, you probably won't have to use this class directly.
 */
class Property {
    /**
     * Creates an instance of [`Property`](https://layrjs.com/docs/v1/reference/property).
     *
     * @param name The name of the property.
     * @param parent The component class, prototype, or instance that owns the property.
     * @param [options.exposure] A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object specifying how the property should be exposed to remote access.
     *
     * @returns The [`Property`](https://layrjs.com/docs/v1/reference/property) instance that was created.
     *
     * @example
     * ```
     * import {Component, Property} from 'ï¹«layr/component';
     *
     * class Movie extends Component {}
     *
     * const titleProperty = new Property('title', Movie.prototype);
     *
     * titleProperty.getName(); // => 'title'
     * titleProperty.getParent(); // => Movie.prototype
     * ```
     *
     * @category Creation
     */
    constructor(name, parent, options = {}) {
        core_helpers_1.assertIsString(name);
        utilities_1.assertIsComponentClassOrInstance(parent);
        this._name = name;
        this._parent = parent;
        this.setOptions(options);
        this._initialize();
    }
    _initialize() { }
    /**
     * Returns the name of the property.
     *
     * @returns A string.
     *
     * @example
     * ```
     * titleProperty.getName(); // => 'title'
     * ```
     *
     * @category Basic Methods
     */
    getName() {
        return this._name;
    }
    /**
     * Returns the parent of the property.
     *
     * @returns A component class, prototype, or instance.
     *
     * @example
     * ```
     * titleProperty.getParent(); // => Movie.prototype
     * ```
     *
     * @category Basic Methods
     */
    getParent() {
        return this._parent;
    }
    // === Options ===
    setOptions(options = {}) {
        const { exposure, ...unknownOptions } = options;
        core_helpers_1.assertNoUnknownOptions(unknownOptions);
        if (exposure !== undefined) {
            this.setExposure(exposure);
        }
    }
    /**
     * Returns an object specifying how the property is exposed to remote access.
     *
     * @returns A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object.
     *
     * @example
     * ```
     * titleProperty.getExposure(); // => {get: true, set: true}
     * ```
     *
     * @category Exposure
     */
    getExposure() {
        return this._exposure;
    }
    /**
     * Sets how the property is exposed to remote access.
     *
     * @param [exposure] A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object.
     *
     * @example
     * ```
     * titleProperty.setExposure({get: true, set: true});
     * ```
     *
     * @category Exposure
     */
    setExposure(exposure = {}) {
        this._exposure = this._normalizeExposure(exposure);
    }
    _normalizeExposure(exposure) {
        let normalizedExposure;
        for (const [operation, setting] of Object.entries(exposure)) {
            if (setting === undefined) {
                continue;
            }
            const normalizedSetting = utilities_1.ensureComponentClass(this._parent).normalizePropertyOperationSetting(setting);
            if (normalizedSetting === undefined) {
                continue;
            }
            if (normalizedExposure === undefined) {
                normalizedExposure = {};
            }
            normalizedExposure[operation] = normalizedSetting;
        }
        return normalizedExposure;
    }
    /**
     * Returns whether an operation is allowed on the property.
     *
     * @param operation A string representing an operation. Currently supported operations are 'get', 'set', and 'call'.
     *
     * @returns A boolean.
     *
     * @example
     * ```
     * titleProperty.operationIsAllowed('get'); // => true
     * titleProperty.operationIsAllowed('call'); // => false
     * ```
     *
     * @category Exposure
     * @possiblyasync
     */
    operationIsAllowed(operation) {
        var _a;
        const setting = (_a = this._exposure) === null || _a === void 0 ? void 0 : _a[operation];
        if (setting === undefined) {
            return false;
        }
        return possibly_async_1.possiblyAsync(this._parent.resolvePropertyOperationSetting(setting), (resolvedSetting) => resolvedSetting === true);
    }
    /**
     * @typedef PropertyExposure
     *
     * A `PropertyExposure` is a plain object specifying how a property is exposed to remote access.
     *
     * The shape of the object is `{[operation]: permission}` where:
     *
     * - `operation` is a string representing the different types of operations (`'get'` and `'set'` for attributes, and `'call'` for methods).
     * - `permission` is a boolean (or a string or array of strings if the [`WithRoles`](https://layrjs.com/docs/v1/reference/with-roles) mixin is used) specifying whether the operation is allowed or not.
     *
     * @example
     * ```
     * {get: true, set: true}
     * {get: 'anyone', set: ['author', 'admin']}
     * {call: true}
     * {call: 'admin'}
     * ```
     *
     * @category Exposure
     */
    // === Forking ===
    fork(parent) {
        const forkedProperty = Object.create(this);
        forkedProperty._parent = parent;
        forkedProperty._initialize();
        return forkedProperty;
    }
    // === Introspection ===
    introspect() {
        const introspectedExposure = this.introspectExposure();
        if (introspectedExposure === undefined) {
            return undefined;
        }
        return {
            name: this.getName(),
            type: core_helpers_1.getTypeOf(this),
            exposure: introspectedExposure
        };
    }
    introspectExposure() {
        const exposure = this.getExposure();
        if (exposure === undefined) {
            return undefined;
        }
        // We don't want to expose backend operation settings to the frontend
        // So if there is a {call: 'admin'} exposure, we want to return {call: true}
        const introspectedExposure = mapValues_1.default(exposure, () => true);
        return introspectedExposure;
    }
    static unintrospect(introspectedProperty) {
        const { name, type: _type, ...options } = introspectedProperty;
        return { name, options };
    }
    // === Utilities ===
    static isProperty(value) {
        return isPropertyInstance(value);
    }
    describeType() {
        return 'property';
    }
    describe() {
        return `${this.describeType()}: '${this.getParent().describeComponentProperty(this.getName())}'`;
    }
}
exports.Property = Property;
function isPropertyClass(value) {
    return typeof (value === null || value === void 0 ? void 0 : value.isProperty) === 'function';
}
exports.isPropertyClass = isPropertyClass;
function isPropertyInstance(value) {
    return isPropertyClass(value === null || value === void 0 ? void 0 : value.constructor) === true;
}
exports.isPropertyInstance = isPropertyInstance;
//# sourceMappingURL=property.js.map