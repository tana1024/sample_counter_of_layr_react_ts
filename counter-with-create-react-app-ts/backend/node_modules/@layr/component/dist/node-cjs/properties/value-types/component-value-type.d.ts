import { ValueType, ValueTypeOptions } from './value-type';
import type { TraverseAttributesIteratee, TraverseAttributesOptions, ResolveAttributeSelectorOptions } from '../../component';
import type { Attribute } from '../attribute';
import type { AttributeSelector } from '../attribute-selector';
import { SerializeOptions } from '../../serialization';
export declare class ComponentValueType extends ValueType {
    _componentType: string;
    constructor(componentType: string, attribute: Attribute, options?: ValueTypeOptions);
    getComponentType(): string;
    getComponent(attribute: Attribute): typeof import("../../component").Component | import("../../component").Component;
    toString(): string;
    _checkValue(value: unknown, attribute: Attribute): boolean;
    _traverseAttributes(iteratee: TraverseAttributesIteratee, attribute: Attribute, component: unknown, options: TraverseAttributesOptions): void;
    _resolveAttributeSelector(normalizedAttributeSelector: AttributeSelector, attribute: Attribute, component: unknown, options: ResolveAttributeSelectorOptions): AttributeSelector;
    runValidators(value: unknown, attributeSelector?: AttributeSelector): {
        validator: import("../..").Validator;
        path: string;
    }[];
    serializeValue(value: unknown, attribute: Attribute, options?: SerializeOptions): unknown;
    static isComponentValueType(value: any): value is ComponentValueType;
}
export declare function isComponentValueTypeInstance(value: any): value is ComponentValueType;
