"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unintrospectValueType = exports.createValueType = void 0;
const any_value_type_1 = require("./any-value-type");
const boolean_value_type_1 = require("./boolean-value-type");
const number_value_type_1 = require("./number-value-type");
const string_value_type_1 = require("./string-value-type");
const object_value_type_1 = require("./object-value-type");
const date_value_type_1 = require("./date-value-type");
const regexp_value_type_1 = require("./regexp-value-type");
const array_value_type_1 = require("./array-value-type");
const component_value_type_1 = require("./component-value-type");
const validation_1 = require("../../validation");
const utilities_1 = require("../../utilities");
const VALUE_TYPE_MAP = new Map(Object.entries({
    any: any_value_type_1.AnyValueType,
    boolean: boolean_value_type_1.BooleanValueType,
    number: number_value_type_1.NumberValueType,
    string: string_value_type_1.StringValueType,
    object: object_value_type_1.ObjectValueType,
    Date: date_value_type_1.DateValueType,
    RegExp: regexp_value_type_1.RegExpValueType
}));
function createValueType(specifier, attribute, options = {}) {
    const { validators = [], items } = options;
    let type = specifier ? specifier : 'any';
    let isOptional;
    if (type.endsWith('?')) {
        isOptional = true;
        type = type.slice(0, -1);
        if (type === '') {
            type = 'any';
        }
    }
    else {
        isOptional = false;
    }
    if (type.endsWith('[]')) {
        const itemSpecifier = type.slice(0, -2);
        const itemType = createValueType(itemSpecifier, attribute, { ...items });
        return new array_value_type_1.ArrayValueType(itemType, attribute, { isOptional, validators });
    }
    if (items !== undefined) {
        throw new Error(`The 'items' option cannot be specified for a type that is not an array (${attribute.describe()}, type: '${specifier}')`);
    }
    const ValueTypeClass = VALUE_TYPE_MAP.get(type);
    if (ValueTypeClass !== undefined) {
        return new ValueTypeClass(attribute, { isOptional, validators });
    }
    if (!utilities_1.isComponentType(type)) {
        throw new Error(`The specified type is invalid (${attribute.describe()}, type: '${specifier}')`);
    }
    return new component_value_type_1.ComponentValueType(type, attribute, { isOptional, validators });
}
exports.createValueType = createValueType;
function unintrospectValueType({ valueType, validators: introspectedValidators, items: introspectedItems }) {
    let unintrospectedValidators;
    let unintrospectedItems;
    if (introspectedValidators !== undefined) {
        unintrospectedValidators = introspectedValidators.map((introspectedValidator) => {
            const { name, function: func, arguments: args, message } = validation_1.Validator.unintrospect(introspectedValidator);
            return new validation_1.Validator(func, { name, arguments: args, message });
        });
    }
    if (introspectedItems !== undefined) {
        unintrospectedItems = unintrospectValueType(introspectedItems);
    }
    const unintrospectedValueType = {};
    if (valueType !== undefined) {
        unintrospectedValueType.valueType = valueType;
    }
    if (unintrospectedValidators !== undefined) {
        unintrospectedValueType.validators = unintrospectedValidators;
    }
    if (unintrospectedItems !== undefined) {
        unintrospectedValueType.items = unintrospectedItems;
    }
    return unintrospectedValueType;
}
exports.unintrospectValueType = unintrospectValueType;
//# sourceMappingURL=factory.js.map