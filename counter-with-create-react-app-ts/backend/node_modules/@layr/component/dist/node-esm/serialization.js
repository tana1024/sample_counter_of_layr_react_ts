import { serialize as simpleSerialize } from 'simple-serialization';
import { possiblyAsync } from 'possibly-async';
import { isES2015Class } from 'core-helpers';
import { isComponentClassOrInstance } from './utilities';
export function serialize(value, options = {}) {
    const { serializedComponents = new Set(), objectSerializer: originalObjectSerializer, functionSerializer: originalFunctionSerializer, serializeFunctions = false, ...otherOptions } = options;
    const objectSerializer = function (object) {
        if (originalObjectSerializer !== undefined) {
            const serializedObject = originalObjectSerializer(object);
            if (serializedObject !== undefined) {
                return serializedObject;
            }
        }
        if (isComponentClassOrInstance(object)) {
            return object.serialize({ ...options, serializedComponents });
        }
    };
    let functionSerializer;
    if (serializeFunctions) {
        functionSerializer = function (func) {
            if (originalFunctionSerializer !== undefined) {
                const serializedFunction = originalFunctionSerializer(func);
                if (serializedFunction !== undefined) {
                    return serializedFunction;
                }
            }
            if (isES2015Class(func)) {
                throw new Error('Cannot serialize a class');
            }
            const functionCode = serializeFunction(func);
            const serializedFunction = { __function: functionCode };
            return possiblyAsync(possiblyAsync.mapValues(func, (attributeValue) => simpleSerialize(attributeValue, { ...otherOptions, objectSerializer, functionSerializer })), (serializedAttributes) => {
                Object.assign(serializedFunction, serializedAttributes);
                return serializedFunction;
            });
        };
    }
    return simpleSerialize(value, { ...otherOptions, objectSerializer, functionSerializer });
}
export function serializeFunction(func) {
    let sourceCode = func.toString();
    // Clean functions generated by `new Function()`
    if (sourceCode.startsWith('function anonymous(\n)')) {
        sourceCode = 'function ()' + sourceCode.slice('function anonymous(\n)'.length);
    }
    return sourceCode;
}
//# sourceMappingURL=serialization.js.map