import { ObserverPayload } from '@layr/observable';
import type { Component, TraverseAttributesIteratee, TraverseAttributesOptions, ResolveAttributeSelectorOptions } from '../component';
import { Property, PropertyOptions, IntrospectedProperty, UnintrospectedProperty } from './property';
import { ValueType, IntrospectedValueType, UnintrospectedValueType } from './value-types';
import { AttributeSelector } from './attribute-selector';
import type { Validator, ValidatorFunction } from '../validation';
import { SerializeOptions } from '../serialization';
export declare type AttributeOptions = PropertyOptions & {
    valueType?: string;
    value?: unknown;
    default?: unknown;
    validators?: (Validator | ValidatorFunction)[];
    items?: AttributeItemsOptions;
    getter?: (this: any) => unknown;
    setter?: (this: any, value: any) => void;
};
declare type AttributeItemsOptions = {
    validators?: (Validator | ValidatorFunction)[];
    items?: AttributeItemsOptions;
};
export declare type IntrospectedAttribute = IntrospectedProperty & {
    value?: unknown;
    default?: unknown;
} & IntrospectedValueType;
export declare type UnintrospectedAttribute = UnintrospectedProperty & {
    options: {
        value?: unknown;
        default?: unknown;
    } & UnintrospectedValueType;
};
declare const Attribute_base: {
    new (...args: any[]): {
        addObserver(observer: import("@layr/observable").Observer): void;
        removeObserver(observer: import("@layr/observable").Observer): void;
        callObservers(payload?: ObserverPayload | undefined): void;
        __observers?: import("@layr/observable").ObserverSet | undefined;
        __getObservers(): import("@layr/observable").ObserverSet;
        isObservable(value: any): value is import("@layr/observable").ObservableType;
    };
    readonly addObserver: any;
    readonly removeObserver: any;
    readonly callObservers: any;
    __observers?: import("@layr/observable").ObserverSet | undefined;
    readonly __getObservers: any;
    readonly isObservable: any;
} & typeof Property;
/**
 * *Inherits from [`Property`](https://layrjs.com/docs/v1/reference/property) and [`Observable`](https://layrjs.com/docs/v1/reference/observable#observable-class).*
 *
 * An `Attribute` represents an attribute of a [Component](https://layrjs.com/docs/v1/reference/component) class, prototype, or instance. It plays the role of a regular JavaScript object attribute, but brings some extra features such as runtime type checking, validation, serialization, or observability.
 *
 * #### Usage
 *
 * Typically, you create an `Attribute` and associate it to a component by using the [`@attribute()`](https://layrjs.com/docs/v1/reference/component#attribute-decorator) decorator.
 *
 * For example, here is how you would define a `Movie` class with some attributes:
 *
 * ```
 * // JS
 *
 * import {Component, attribute, validators} from '﹫layr/component';
 *
 * const {minLength} = validators;
 *
 * class Movie extends Component {
 *   // Optional 'string' class attribute
 *   ﹫attribute('string?') static customName;
 *
 *   // Required 'string' instance attribute
 *   ﹫attribute('string') title;
 *
 *   // Optional 'string' instance attribute with a validator and a default value
 *   ﹫attribute('string?', {validators: [minLength(16)]}) summary = '';
 * }
 * ```
 *
 * ```
 * // TS
 *
 * import {Component, attribute, validators} from '﹫layr/component';
 *
 * const {minLength} = validators;
 *
 * class Movie extends Component {
 *   // Optional 'string' class attribute
 *   ﹫attribute('string?') static customName?: string;
 *
 *   // Required 'string' instance attribute
 *   ﹫attribute('string') title!: string;
 *
 *   // Optional 'string' instance attribute with a validator and a default value
 *   ﹫attribute('string?', {validators: [minLength(16)]}) summary? = '';
 * }
 * ```
 *
 * Then you can access the attributes like you would normally do with regular JavaScript objects:
 *
 * ```
 * Movie.customName = 'Film';
 * Movie.customName; // => 'Film'
 *
 * const movie = new Movie({title: 'Inception'});
 * movie.title; // => 'Inception'
 * movie.title = 'Inception 2';
 * movie.title; // => 'Inception 2'
 * movie.summary; // => '' (default value)
 * ```
 *
 * And you can take profit of some extra features:
 *
 * ```
 * // Runtime type checking
 * movie.title = 123; // Error
 * movie.title = undefined; // Error
 *
 * // Validation
 * movie.summary = undefined;
 * movie.isValid(); // => true (movie.summary is optional)
 * movie.summary = 'A nice movie.';
 * movie.isValid(); // => false (movie.summary is too short)
 * movie.summary = 'An awesome movie.'
 * movie.isValid(); // => true
 *
 * // Serialization
 * movie.serialize();
 * // => {__component: 'Movie', title: 'Inception 2', summary: 'An awesome movie.'}
 * ```
 */
export declare class Attribute extends Attribute_base {
    /**
     * Creates an instance of [`Attribute`](https://layrjs.com/docs/v1/reference/attribute). Typically, instead of using this constructor, you would rather use the [`@attribute()`](https://layrjs.com/docs/v1/reference/component#attribute-decorator) decorator.
     *
     * @param name The name of the attribute.
     * @param parent The component class, prototype, or instance that owns the attribute.
     * @param [options.valueType] A string specifying the [type of values](https://layrjs.com/docs/v1/reference/value-type#supported-types) the attribute can store (default: `'any'`).
     * @param [options.value] The initial value of the attribute (usable for class attributes only).
     * @param [options.default] The default value (or a function returning the default value) of the attribute (usable for instance attributes only).
     * @param [options.validators] An array of [validators](https://layrjs.com/docs/v1/reference/validator) for the value of the attribute.
     * @param [options.items.validators] An array of [validators](https://layrjs.com/docs/v1/reference/validator) for the items of an array attribute.
     * @param [options.getter] A getter function for getting the value of the attribute. Plays the same role as a regular [JavaScript getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get).
     * @param [options.setter] A setter function for setting the value of the attribute. Plays the same role as a regular [JavaScript setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set).
     * @param [options.exposure] A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object specifying how the attribute should be exposed to remote access.
     *
     * @returns The [`Attribute`](https://layrjs.com/docs/v1/reference/attribute) instance that was created.
     *
     * @example
     * ```
     * import {Component, Attribute} from '﹫layr/component';
     *
     * class Movie extends Component {}
     *
     * const title = new Attribute('title', Movie.prototype, {valueType: 'string'});
     *
     * title.getName(); // => 'title'
     * title.getParent(); // => Movie.prototype
     * title.getValueType().toString(); // => 'string'
     * ```
     *
     * @category Creation
     */
    constructor(name: string, parent: typeof Component | Component, options?: AttributeOptions);
    _initialize(): void;
    _getter?: () => unknown;
    _setter?: (value: any) => void;
    setOptions(options?: AttributeOptions): void;
    /**
     * See the methods that are inherited from the [`Property`](https://layrjs.com/docs/v1/reference/property#basic-methods) class.
     *
     * @category Property Methods
     */
    _valueType: ValueType;
    /**
     * Returns the type of values the attribute can store.
     *
     * @returns A [ValueType](https://layrjs.com/docs/v1/reference/value-type) instance.
     *
     * @example
     * ```
     * const title = Movie.prototype.getAttribute('title');
     * title.getValueType(); // => A ValueType instance
     * title.getValueType().toString(); // => 'string'
     * title.getValueType().isOptional(); // => false
     * ```
     *
     * @category Value Type
     */
    getValueType(): ValueType;
    _value?: unknown;
    _isSet?: boolean;
    /**
     * Returns the current value of the attribute.
     *
     * @param [options.throwIfUnset] A boolean specifying whether the method should throw an error if the value is not set (default: `true`). If `false` is specified and the value is not set, the method returns `undefined`.
     *
     * @returns A value of the type handled by the attribute.
     *
     * @example
     * ```
     * const title = movie.getAttribute('title');
     * title.getValue(); // => 'Inception'
     * title.unsetValue();
     * title.getValue(); // => Error
     * title.getValue({throwIfUnset: false}); // => undefined
     * ```
     *
     * @category Value
     */
    getValue(options?: {
        throwIfUnset?: boolean;
        autoFork?: boolean;
    }): unknown;
    _ignoreNextSetValueCall?: boolean;
    /**
     * Sets the value of the attribute. If the type of the value doesn't match the expected type, an error is thrown.
     *
     * When the attribute's value changes, the observers of the attribute are automatically executed, and the observers of the parent component are executed as well.
     *
     * @param value The value to be set.
     * @param [options.source] A number specifying the [source of the value](https://layrjs.com/docs/v1/reference/attribute#value-source-type) (default: `0`).
     *
     * @example
     * ```
     * const title = movie.getAttribute('title');
     * title.setValue('Inception 2');
     * title.setValue(123); // => Error
     * ```
     *
     * @category Value
     */
    setValue(value: unknown, { source }?: {
        source?: number | undefined;
    }): {
        previousValue: unknown;
        newValue: unknown;
    };
    /**
     * Unsets the value of the attribute. If the value is already unset, nothing happens.
     *
     * @example
     * ```
     * const title = movie.getAttribute('title');
     * title.isSet(); // => true
     * title.unsetValue();
     * title.isSet(); // => false
     * ```
     *
     * @category Value
     */
    unsetValue(): {
        previousValue: unknown;
    };
    /**
     * Returns whether the value of the attribute is set or not.
     *
     * @returns A boolean.
     *
     * @example
     * ```
     * const title = movie.getAttribute('title');
     * title.isSet(); // => true
     * title.unsetValue();
     * title.isSet(); // => false
     * ```
     *
     * @category Value
     */
    isSet(): boolean;
    checkValue(value: unknown): void;
    _source: number;
    /**
     * Returns the source of the value of the attribute.
     *
     * @returns A [`ValueSource`](https://layrjs.com/docs/v1/reference/attribute#value-source-type) number.
     *
     * @example
     * ```
     * const title = movie.getAttribute('title');
     * title.getValueSource(); // => 0 (the value was set locally)
     * ```
     *
     * @category Value Source
     */
    getValueSource(): number;
    /**
     * Sets the source of the value of the attribute.
     *
     * @param source A [`ValueSource`](https://layrjs.com/docs/v1/reference/attribute#value-source-type) number.
     *
     * @example
     * ```
     * const title = movie.getAttribute('title');
     * title.setValueSource(0); // The value was set locally
     * title.setValueSource(1); // The value came from an upper layer (e.g., the backend)
     * title.setValueSource(-1); // The value came from a lower layer (e.g., the frontend)
     * ```
     *
     * @category Value Source
     */
    setValueSource(source: number): void;
    /**
     * @typedef ValueSource
     *
     * A number representing the source of a value.
     *
     * Currently, three values are supported:
     *
     * * `0`: The value comes from the current layer (i.e., the current runtime environment).
     * * `1`: The value comes from an upper layer (e.g., the backend).
     * * `-1`: The value comes from a lower layer (e.g., the frontend).
     * ```
     *
     * @category Value Source
     */
    _default?: unknown;
    /**
     * Returns the default value of the attribute as specified when the attribute was created.
     *
     * @returns A value or a function returning a value.
     *
     * @example
     * ```
     * const summary = movie.getAttribute('summary');
     * summary.getDefault(); // => function () { return ''; }
     * ```
     *
     * @category Default Value
     */
    getDefault(): unknown;
    /**
     * Evaluate the default value of the attribute. If the default value is a function, the function is called (with the attribute's parent as `this` context), and the result is returned. Otherwise, the default value is returned as is.
     *
     * @returns A value of any type.
     *
     * @example
     * ```
     * const summary = movie.getAttribute('summary');
     * summary.evaluateDefault(); // ''
     * ```
     *
     * @category Default Value
     */
    evaluateDefault(): unknown;
    _isDefaultSetInConstructor?: boolean;
    _fixDecoration(): void;
    _isControlled?: boolean;
    isControlled(): boolean;
    markAsControlled(): void;
    _onChange(payload: ObserverPayload & {
        source?: number;
    }): void;
    _traverseAttributes(iteratee: TraverseAttributesIteratee, options: TraverseAttributesOptions): void;
    _resolveAttributeSelector(normalizedAttributeSelector: AttributeSelector, options: ResolveAttributeSelectorOptions): AttributeSelector;
    serialize(options?: SerializeOptions): unknown;
    /**
     * Validates the value of the attribute. If the value doesn't pass the validation, an error is thrown. The error is a JavaScript `Error` instance with a `failedValidators` custom attribute which contains the result of the [`runValidators()`](https://layrjs.com/docs/v1/reference/attribute#run-validators-instance-method) method.
     *
     * @param [attributeSelector] In case the value of the attribute is a component, your can pass an [`AttributeSelector`](https://layrjs.com/docs/v1/reference/attribute-selector) specifying the component's attributes to be validated (default: `true`, which means that all the component's attributes will be validated).
     *
     * @example
     * ```
     * // JS
     *
     * import {Component, attribute, validators} from '﹫layr/component';
     *
     * const {notEmpty} = validators;
     *
     * class Movie extends Component {
     *   ﹫attribute('string', {validators: [notEmpty()]}) title;
     * }
     *
     * const movie = new Movie({title: 'Inception'});
     * const title = movie.getAttribute('title');
     *
     * title.getValue(); // => 'Inception'
     * title.validate(); // All good!
     * title.setValue('');
     * title.validate(); // => Error {failedValidators: [{validator: ..., path: ''}]}
     * ```
     *
     * @example
     * ```
     * // TS
     *
     * import {Component, attribute, validators} from '﹫layr/component';
     *
     * const {notEmpty} = validators;
     *
     * class Movie extends Component {
     *   ﹫attribute('string', {validators: [notEmpty()]}) title!: string;
     * }
     *
     * const movie = new Movie({title: 'Inception'});
     * const title = movie.getAttribute('title');
     *
     * title.getValue(); // => 'Inception'
     * title.validate(); // All good!
     * title.setValue('');
     * title.validate(); // => Error {failedValidators: [{validator: ..., path: ''}]}
     * ```
     *
     * @category Validation
     */
    validate(attributeSelector?: AttributeSelector): void;
    /**
     * Returns whether the value of the attribute is valid.
     *
     * @param [attributeSelector] In case the value of the attribute is a component, your can pass an [`AttributeSelector`](https://layrjs.com/docs/v1/reference/attribute-selector) specifying the component's attributes to be validated (default: `true`, which means that all the component's attributes will be validated).
     *
     * @returns A boolean.
     *
     * @example
     * ```
     * // See the `title` definition in the `validate()` example
     *
     * title.getValue(); // => 'Inception'
     * title.isValid(); // => true
     * title.setValue('');
     * title.isValid(); // => false
     * ```
     *
     * @category Validation
     */
    isValid(attributeSelector?: AttributeSelector): boolean;
    /**
     * Runs the validators with the value of the attribute.
     *
     * @param [attributeSelector] In case the value of the attribute is a component, your can pass an [`AttributeSelector`](https://layrjs.com/docs/v1/reference/attribute-selector) specifying the component's attributes to be validated (default: `true`, which means that all the component's attributes will be validated).
     *
     * @returns An array containing the validators that have failed. Each item is a plain object composed of a `validator` (a [`Validator`](https://layrjs.com/docs/v1/reference/validator) instance) and a `path` (a string representing the path of the attribute containing the validator that has failed).
     *
     * @example
     * ```
     * // See the `title` definition in the `validate()` example
     *
     * title.getValue(); // => 'Inception'
     * title.runValidators(); // => []
     * title.setValue('');
     * title.runValidators(); // => [{validator: ..., path: ''}]
     * ```
     *
     * @category Validation
     */
    runValidators(attributeSelector?: AttributeSelector): {
        validator: Validator;
        path: string;
    }[];
    /**
     * See the methods that are inherited from the [`Observable`](https://layrjs.com/docs/v1/reference/observable#observable-class) class.
     *
     * @category Observability
     */
    introspect(): IntrospectedAttribute | undefined;
    static unintrospect(introspectedAttribute: IntrospectedAttribute): {
        name: string;
        options: {
            exposure?: Partial<Record<import("./property").PropertyOperation, true>> | undefined;
        } & {
            value?: unknown;
            default?: unknown;
        } & UnintrospectedValueType;
    };
    static isAttribute(value: any): value is Attribute;
    describeType(): string;
}
/**
 * Returns whether the specified value is an `Attribute` class.
 *
 * @param value A value of any type.
 *
 * @returns A boolean.
 *
 * @category Utilities
 */
export declare function isAttributeClass(value: any): value is typeof Attribute;
/**
 * Returns whether the specified value is an `Attribute` instance.
 *
 * @param value A value of any type.
 *
 * @returns A boolean.
 *
 * @category Utilities
 */
export declare function isAttributeInstance(value: any): value is Attribute;
export {};
