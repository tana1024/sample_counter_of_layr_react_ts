import { ValueType, ValueTypeOptions } from './value-type';
import type { TraverseAttributesIteratee, TraverseAttributesOptions, ResolveAttributeSelectorOptions } from '../../component';
import type { Attribute } from '../attribute';
import { AttributeSelector } from '../attribute-selector';
import { SerializeOptions } from '../../serialization';
export declare class ArrayValueType extends ValueType {
    _itemType: ValueType;
    constructor(itemType: ValueType, attribute: Attribute, options?: ValueTypeOptions);
    getItemType(): ValueType;
    toString(): string;
    checkValue(values: unknown[], attribute: Attribute): void;
    _checkValue(values: unknown, attribute: Attribute): boolean;
    _traverseAttributes(iteratee: TraverseAttributesIteratee, attribute: Attribute, items: unknown, options: TraverseAttributesOptions): void;
    _resolveAttributeSelector(normalizedAttributeSelector: AttributeSelector, attribute: Attribute, items: unknown, options: ResolveAttributeSelectorOptions): AttributeSelector;
    runValidators(values: unknown[] | undefined, attributeSelector?: AttributeSelector): {
        validator: import("../..").Validator;
        path: string;
    }[];
    serializeValue(items: unknown, attribute: Attribute, options?: SerializeOptions): unknown;
    introspect(): import("./value-type").IntrospectedValueType;
    static isArrayValueType(value: any): value is ArrayValueType;
}
export declare function isArrayValueTypeInstance(value: any): value is ArrayValueType;
