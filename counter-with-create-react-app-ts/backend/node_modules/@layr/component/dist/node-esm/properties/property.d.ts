import type { Component } from '../component';
export declare type PropertyOptions = {
    exposure?: PropertyExposure;
};
export declare type PropertyExposure = Partial<Record<PropertyOperation, PropertyOperationSetting>>;
export declare type PropertyOperation = 'get' | 'set' | 'call';
export declare type PropertyOperationSetting = boolean | string | string[];
export declare type PropertyFilter = (property: any) => boolean | PromiseLike<boolean>;
export declare type PropertyFilterSync = (property: any) => boolean;
export declare type PropertyFilterAsync = (property: any) => PromiseLike<boolean>;
export declare type IntrospectedProperty = {
    name: string;
    type: string;
    exposure?: IntrospectedExposure;
};
export declare type IntrospectedExposure = Partial<Record<PropertyOperation, boolean>>;
export declare type UnintrospectedProperty = {
    name: string;
    options: {
        exposure?: UnintrospectedExposure;
    };
};
export declare type UnintrospectedExposure = Partial<Record<PropertyOperation, true>>;
/**
 * A base class from which classes such as [`Attribute`](https://layrjs.com/docs/v1/reference/attribute) or [`Method`](https://layrjs.com/docs/v1/reference/method) are constructed. Unless you build a custom property class, you probably won't have to use this class directly.
 */
export declare class Property {
    _name: string;
    _parent: typeof Component | Component;
    /**
     * Creates an instance of [`Property`](https://layrjs.com/docs/v1/reference/property).
     *
     * @param name The name of the property.
     * @param parent The component class, prototype, or instance that owns the property.
     * @param [options.exposure] A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object specifying how the property should be exposed to remote access.
     *
     * @returns The [`Property`](https://layrjs.com/docs/v1/reference/property) instance that was created.
     *
     * @example
     * ```
     * import {Component, Property} from 'ï¹«layr/component';
     *
     * class Movie extends Component {}
     *
     * const titleProperty = new Property('title', Movie.prototype);
     *
     * titleProperty.getName(); // => 'title'
     * titleProperty.getParent(); // => Movie.prototype
     * ```
     *
     * @category Creation
     */
    constructor(name: string, parent: typeof Component | Component, options?: PropertyOptions);
    _initialize(): void;
    /**
     * Returns the name of the property.
     *
     * @returns A string.
     *
     * @example
     * ```
     * titleProperty.getName(); // => 'title'
     * ```
     *
     * @category Basic Methods
     */
    getName(): string;
    /**
     * Returns the parent of the property.
     *
     * @returns A component class, prototype, or instance.
     *
     * @example
     * ```
     * titleProperty.getParent(); // => Movie.prototype
     * ```
     *
     * @category Basic Methods
     */
    getParent(): typeof Component | Component;
    setOptions(options?: PropertyOptions): void;
    _exposure?: PropertyExposure;
    /**
     * Returns an object specifying how the property is exposed to remote access.
     *
     * @returns A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object.
     *
     * @example
     * ```
     * titleProperty.getExposure(); // => {get: true, set: true}
     * ```
     *
     * @category Exposure
     */
    getExposure(): Partial<Record<PropertyOperation, PropertyOperationSetting>> | undefined;
    /**
     * Sets how the property is exposed to remote access.
     *
     * @param [exposure] A [`PropertyExposure`](https://layrjs.com/docs/v1/reference/property#property-exposure-type) object.
     *
     * @example
     * ```
     * titleProperty.setExposure({get: true, set: true});
     * ```
     *
     * @category Exposure
     */
    setExposure(exposure?: {}): void;
    _normalizeExposure(exposure: PropertyExposure): Partial<Record<PropertyOperation, PropertyOperationSetting>> | undefined;
    /**
     * Returns whether an operation is allowed on the property.
     *
     * @param operation A string representing an operation. Currently supported operations are 'get', 'set', and 'call'.
     *
     * @returns A boolean.
     *
     * @example
     * ```
     * titleProperty.operationIsAllowed('get'); // => true
     * titleProperty.operationIsAllowed('call'); // => false
     * ```
     *
     * @category Exposure
     * @possiblyasync
     */
    operationIsAllowed(operation: PropertyOperation): boolean | PromiseLike<false> | PromiseLike<true>;
    /**
     * @typedef PropertyExposure
     *
     * A `PropertyExposure` is a plain object specifying how a property is exposed to remote access.
     *
     * The shape of the object is `{[operation]: permission}` where:
     *
     * - `operation` is a string representing the different types of operations (`'get'` and `'set'` for attributes, and `'call'` for methods).
     * - `permission` is a boolean (or a string or array of strings if the [`WithRoles`](https://layrjs.com/docs/v1/reference/with-roles) mixin is used) specifying whether the operation is allowed or not.
     *
     * @example
     * ```
     * {get: true, set: true}
     * {get: 'anyone', set: ['author', 'admin']}
     * {call: true}
     * {call: 'admin'}
     * ```
     *
     * @category Exposure
     */
    fork<T extends Property>(this: T, parent: typeof Component | Component): T;
    introspect(): IntrospectedProperty | undefined;
    introspectExposure(): Partial<Record<PropertyOperation, boolean>> | undefined;
    static unintrospect(introspectedProperty: IntrospectedProperty): UnintrospectedProperty;
    static isProperty(value: any): value is Property;
    describeType(): string;
    describe(): string;
}
export declare function isPropertyClass(value: any): value is typeof Property;
export declare function isPropertyInstance(value: any): value is Property;
