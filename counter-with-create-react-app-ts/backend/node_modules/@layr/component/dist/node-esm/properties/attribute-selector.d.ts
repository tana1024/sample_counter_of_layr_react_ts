import { PlainObject } from 'core-helpers';
import type { Attribute } from './attribute';
export declare type AttributeSelector = boolean | PlainObject;
/**
 * @typedef AttributeSelector
 *
 * An `AttributeSelector` allows you to select some attributes of a component.
 *
 * The simplest `AttributeSelector` is `true`, which means that all the attributes are selected.

 * Another possible `AttributeSelector` is `false`, which means that no attributes are selected.
 *
 * To select some specific attributes, you can use a plain object where:
 *
 * * The keys are the name of the attributes you want to select.
 * * The values are a boolean or a nested object to select some attributes of a nested component.
 *
 * **Examples:**
 *
 * ```
 * // Selects all the attributes
 * true
 *
 * // Excludes all the attributes
 * false
 *
 * // Selects `title`
 * {title: true}
 *
 * // Selects also `title` (`summary` is not selected)
 * {title: true, summary: false}
 *
 * // Selects `title` and `summary`
 * {title: true, summary: true}
 *
 * // Selects `title`, `movieDetails.duration`, and `movieDetails.aspectRatio`
 * {
 *   title: true,
 *   movieDetails: {
 *     duration: true,
 *     aspectRatio: true
 *   }
 * }
 * ```
 */
/**
 * Creates an `AttributeSelector` from the specified names.
 *
 * @param names An array of strings.
 *
 * @returns An `AttributeSelector`.
 *
 * @example
 * ```
 * createAttributeSelectorFromNames(['title', 'summary']);
 * // => {title: true, summary: true}
 * ```
 *
 * @category Functions
 */
export declare function createAttributeSelectorFromNames(names: string[]): PlainObject;
/**
 * Creates an `AttributeSelector` from an attribute iterator.
 *
 * @param attributes An [`Attribute`](https://layrjs.com/docs/v1/reference/attribute) iterator.
 *
 * @returns An `AttributeSelector`.
 *
 * @example
 * ```
 * createAttributeSelectorFromAttributes(Movie.prototype.getAttributes());
 * // => {title: true, summary: true, movieDetails: true}
 * ```
 *
 * @category Functions
 */
export declare function createAttributeSelectorFromAttributes(attributes: Iterable<Attribute>): PlainObject;
/**
 * Gets an entry of an `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param name The name of the entry to get.
 *
 * @returns An `AttributeSelector`.
 *
 * @example
 * ```
 * getFromAttributeSelector(true, 'title');
 * // => true
 *
 * getFromAttributeSelector(false, 'title');
 * // => false
 *
 * getFromAttributeSelector({title: true}, 'title');
 * // => true
 *
 * getFromAttributeSelector({title: true}, 'summary');
 * // => false
 *
 * getFromAttributeSelector({movieDetails: {duration: true}}, 'movieDetails');
 * // => {duration: true}
 * ```
 *
 * @category Functions
 */
export declare function getFromAttributeSelector(attributeSelector: AttributeSelector, name: string): AttributeSelector;
/**
 * Returns an `AttributeSelector` where an entry of the specified `AttributeSelector` is set with another `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param name The name of the entry to set.
 * @param subattributeSelector Another `AttributeSelector`.
 *
 * @returns A new `AttributeSelector`.
 *
 * @example
 * ```
 * setWithinAttributeSelector({title: true}, 'summary', true);
 * // => {title: true, summary: true}
 *
 * setWithinAttributeSelector({title: true}, 'summary', false);
 * // => {title: true}
 *
 * setWithinAttributeSelector({title: true, summary: true}, 'summary', false);
 * // => {title: true}
 *
 * setWithinAttributeSelector({title: true}, 'movieDetails', {duration: true});
 * // => {title: true, movieDetails: {duration: true}}
 * ```
 *
 * @category Functions
 */
export declare function setWithinAttributeSelector(attributeSelector: AttributeSelector, name: string, subattributeSelector: AttributeSelector): AttributeSelector;
/**
 * Clones an `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 *
 * @returns A new `AttributeSelector`.
 *
 * @example
 * ```
 * cloneAttributeSelector(true);
 * // => true
 *
 * cloneAttributeSelector(false);
 * // => false
 *
 * cloneAttributeSelector({title: true, movieDetails: {duration: true});
 * // => {title: true, movieDetails: {duration: true}
 * ```
 *
 * @category Functions
 */
export declare function cloneAttributeSelector(attributeSelector: AttributeSelector): AttributeSelector;
/**
 * Returns whether an `AttributeSelector` is equal to another `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param otherAttributeSelector Another `AttributeSelector`.
 *
 * @returns A boolean.
 *
 * @example
 * ```
 * attributeSelectorsAreEqual({title: true}, {title: true});
 * // => true
 *
 * attributeSelectorsAreEqual({title: true, summary: false}, {title: true});
 * // => true
 *
 * attributeSelectorsAreEqual({title: true}, {summary: true});
 * // => false
 * ```
 *
 * @category Functions
 */
export declare function attributeSelectorsAreEqual(attributeSelector: AttributeSelector, otherAttributeSelector: AttributeSelector): boolean;
/**
 * Returns whether an `AttributeSelector` includes another `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param otherAttributeSelector Another `AttributeSelector`.
 *
 * @returns A boolean.
 *
 * @example
 * ```
 * attributeSelectorIncludes({title: true}, {title: true});
 * // => true
 *
 * attributeSelectorIncludes({title: true, summary: true}, {title: true});
 * // => true
 *
 * attributeSelectorIncludes({title: true}, {summary: true});
 * // => false
 * ```
 *
 * @category Functions
 */
export declare function attributeSelectorIncludes(attributeSelector: AttributeSelector, otherAttributeSelector: AttributeSelector): boolean;
/**
 * Returns an `AttributeSelector` which is the result of merging an `AttributeSelector` with another `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param otherAttributeSelector Another `AttributeSelector`.
 *
 * @returns A new `AttributeSelector`.
 *
 * @example
 * ```
 * mergeAttributeSelectors({title: true}, {title: true});
 * // => {title: true}
 *
 * mergeAttributeSelectors({title: true}, {summary: true});
 * // => {title: true, summary: true}
 *
 * mergeAttributeSelectors({title: true, summary: true}, {summary: false});
 * // => {title: true}
 * ```
 *
 * @category Functions
 */
export declare function mergeAttributeSelectors(attributeSelector: AttributeSelector, otherAttributeSelector: AttributeSelector): AttributeSelector;
/**
 * Returns an `AttributeSelector` which is the result of the intersection of an `AttributeSelector` with another `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param otherAttributeSelector Another `AttributeSelector`.
 *
 * @returns A new `AttributeSelector`.
 *
 * @example
 * ```
 * intersectAttributeSelectors({title: true, summary: true}, {title: true});
 * // => {title: true}
 *
 * intersectAttributeSelectors({title: true}, {summary: true});
 * // => {}
 * ```
 *
 * @category Functions
 */
export declare function intersectAttributeSelectors(attributeSelector: AttributeSelector, otherAttributeSelector: AttributeSelector): AttributeSelector;
/**
 * Returns an `AttributeSelector` which is the result of removing an `AttributeSelector` from another `AttributeSelector`.
 *
 * @param attributeSelector An `AttributeSelector`.
 * @param otherAttributeSelector Another `AttributeSelector`.
 *
 * @returns A new `AttributeSelector`.
 *
 * @example
 * ```
 * removeFromAttributeSelector({title: true, summary: true}, {summary: true});
 * // => {title: true}
 *
 * removeFromAttributeSelector({title: true}, {title: true});
 * // => {}
 * ```
 *
 * @category Functions
 */
export declare function removeFromAttributeSelector(attributeSelector: AttributeSelector, otherAttributeSelector: AttributeSelector): AttributeSelector;
export declare function iterateOverAttributeSelector(attributeSelector: AttributeSelector): {
    [Symbol.iterator](): Generator<[string, AttributeSelector], void, unknown>;
};
declare type PickFromAttributeSelectorResult<Value> = Value extends Array<infer Element> ? Array<PickFromAttributeSelectorResult<Element>> : Value extends object ? object : Value;
export declare function pickFromAttributeSelector<Value>(value: Value, attributeSelector: AttributeSelector, options?: {
    includeAttributeNames?: string[];
}): PickFromAttributeSelectorResult<Value>;
declare type TraverseIteratee = (value: any, attributeSelector: AttributeSelector, context: TraverseContext) => void;
declare type TraverseContext = {
    name?: string;
    object?: object;
    isArray?: boolean;
};
declare type TraverseOptions = {
    includeSubtrees?: boolean;
    includeLeafs?: boolean;
};
export declare function traverseAttributeSelector(value: any, attributeSelector: AttributeSelector, iteratee: TraverseIteratee, options?: TraverseOptions): void;
export declare function trimAttributeSelector(attributeSelector: AttributeSelector): AttributeSelector;
export declare function normalizeAttributeSelector(attributeSelector: any): AttributeSelector;
export {};
