import { Validator } from './validator';
const validatorFunctions = {
    // Numbers
    integer: (value) => value !== undefined && Number.isInteger(value),
    positive: (value) => value !== undefined && value >= 0,
    negative: (value) => value !== undefined && value < 0,
    lessThan: (value, number) => value !== undefined && value < number,
    lessThanOrEqual: (value, number) => value !== undefined && value <= number,
    greaterThan: (value, number) => value !== undefined && value > number,
    greaterThanOrEqual: (value, number) => value !== undefined && value >= number,
    range: (value, [min, max]) => value !== undefined && value >= min && value <= max,
    // Strings and arrays
    notEmpty: (value) => value !== undefined && value.length > 0,
    minLength: (value, minLength) => value !== undefined && value.length >= minLength,
    maxLength: (value, maxLength) => value !== undefined && value.length <= maxLength,
    rangeLength: (value, [minLength, maxLength]) => value !== undefined && value.length >= minLength && value.length <= maxLength,
    // Strings
    match: (value, pattern) => value !== undefined && pattern.test(value),
    // Any values
    required: (value) => value !== undefined,
    anyOf: (value, array) => array.includes(value),
    noneOf: (value, array) => !array.includes(value)
};
export const validators = {};
for (const [name, func] of Object.entries(validatorFunctions)) {
    validators[name] = (...args) => createValidator(name, func, args);
}
function createValidator(name, func, args) {
    const numberOfRequiredArguments = func.length - 1;
    const validatorArguments = args.slice(0, numberOfRequiredArguments);
    if (validatorArguments.length < numberOfRequiredArguments) {
        throw new Error(`A required parameter is missing to build the validator '${name}'`);
    }
    const [message] = args.slice(numberOfRequiredArguments);
    if (message !== undefined && typeof message !== 'string') {
        throw new Error(`When building a validator, if an extra parameter is specified, it must be a string representing the failed validation message (validator: '${name}')`);
    }
    return new Validator(func, { name, arguments: validatorArguments, message });
}
//# sourceMappingURL=validator-builders.js.map