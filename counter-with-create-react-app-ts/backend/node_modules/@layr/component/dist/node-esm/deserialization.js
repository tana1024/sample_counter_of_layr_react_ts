import { deserialize as simpleDeserialize } from 'simple-serialization';
import { possiblyAsync } from 'possibly-async';
import { isComponentClass } from './utilities';
export function deserialize(value, options = {}) {
    const { objectDeserializer: originalObjectDeserializer, functionDeserializer: originalFunctionDeserializer, componentGetter, attributeFilter, deserializeFunctions = false, ...otherOptions } = options;
    const objectDeserializer = function (object) {
        if (originalObjectDeserializer !== undefined) {
            const deserializedObject = originalObjectDeserializer(object);
            if (deserializedObject !== undefined) {
                return deserializedObject;
            }
        }
        const { __component: componentType, ...attributes } = object;
        if (componentType === undefined) {
            return undefined;
        }
        if (componentGetter === undefined) {
            throw new Error("Cannot deserialize a component without a 'componentGetter'");
        }
        const component = componentGetter(componentType);
        if (isComponentClass(component)) {
            return component.deserialize(attributes, options);
        }
        return component.constructor.recreate(attributes, options);
    };
    let functionDeserializer;
    if (deserializeFunctions) {
        functionDeserializer = function (object) {
            if (originalFunctionDeserializer !== undefined) {
                const deserializedFunction = originalFunctionDeserializer(object);
                if (deserializedFunction !== undefined) {
                    return deserializedFunction;
                }
            }
            const { __function, ...serializedAttributes } = object;
            if (__function === undefined) {
                return undefined;
            }
            const functionCode = __function;
            return possiblyAsync(possiblyAsync.mapValues(serializedAttributes, (attributeValue) => simpleDeserialize(attributeValue, {
                ...otherOptions,
                objectDeserializer,
                functionDeserializer
            })), (deserializedAttributes) => {
                const deserializedFunction = deserializeFunction(functionCode);
                Object.assign(deserializedFunction, deserializedAttributes);
                return deserializedFunction;
            });
        };
    }
    return simpleDeserialize(value, { ...otherOptions, objectDeserializer, functionDeserializer });
}
export function deserializeFunction(functionCode) {
    return new Function(`return (${functionCode});`)();
    // let evalCode = `(${functionCode});`;
    // if (context !== undefined) {
    //   const contextKeys = Object.keys(context).join(', ');
    //   const contextCode = `const {${contextKeys}} = context;`;
    //   evalCode = `${contextCode} ${evalCode}`;
    // }
    // return eval(evalCode);
}
//# sourceMappingURL=deserialization.js.map